{"ast":null,"code":"import clamp from 'lodash-es/clamp';\nimport { isOneOf, getPosition, eventScope, setStyle } from '../utils/';\nvar Direction;\n\n(function (Direction) {\n  Direction[Direction[\"X\"] = 0] = \"X\";\n  Direction[Direction[\"Y\"] = 1] = \"Y\";\n})(Direction || (Direction = {}));\n\nexport function mouseHandler(scrollbar) {\n  var addEvent = eventScope(scrollbar);\n  var container = scrollbar.containerEl;\n  var _a = scrollbar.track,\n      xAxis = _a.xAxis,\n      yAxis = _a.yAxis;\n\n  function calcOffset(direction, clickPosition) {\n    var size = scrollbar.size;\n\n    if (direction === Direction.X) {\n      var totalWidth = size.container.width + (xAxis.thumb.realSize - xAxis.thumb.displaySize);\n      return clickPosition / totalWidth * size.content.width;\n    }\n\n    if (direction === Direction.Y) {\n      var totalHeight = size.container.height + (yAxis.thumb.realSize - yAxis.thumb.displaySize);\n      return clickPosition / totalHeight * size.content.height;\n    }\n\n    return 0;\n  }\n\n  function getTrackDirection(elem) {\n    if (isOneOf(elem, [xAxis.element, xAxis.thumb.element])) {\n      return Direction.X;\n    }\n\n    if (isOneOf(elem, [yAxis.element, yAxis.thumb.element])) {\n      return Direction.Y;\n    }\n\n    return void 0;\n  }\n\n  var isMouseDown;\n  var isMouseMoving;\n  var startOffsetToThumb;\n  var startTrackDirection;\n  var containerRect;\n  addEvent(container, 'click', function (evt) {\n    if (isMouseMoving || !isOneOf(evt.target, [xAxis.element, yAxis.element])) {\n      return;\n    }\n\n    var track = evt.target;\n    var direction = getTrackDirection(track);\n    var rect = track.getBoundingClientRect();\n    var clickPos = getPosition(evt);\n    var offset = scrollbar.offset,\n        limit = scrollbar.limit;\n\n    if (direction === Direction.X) {\n      var offsetOnTrack = clickPos.x - rect.left - xAxis.thumb.displaySize / 2;\n      scrollbar.setMomentum(clamp(calcOffset(direction, offsetOnTrack) - offset.x, -offset.x, limit.x - offset.x), 0);\n    }\n\n    if (direction === Direction.Y) {\n      var offsetOnTrack = clickPos.y - rect.top - yAxis.thumb.displaySize / 2;\n      scrollbar.setMomentum(0, clamp(calcOffset(direction, offsetOnTrack) - offset.y, -offset.y, limit.y - offset.y));\n    }\n  });\n  addEvent(container, 'mousedown', function (evt) {\n    if (!isOneOf(evt.target, [xAxis.thumb.element, yAxis.thumb.element])) {\n      return;\n    }\n\n    isMouseDown = true;\n    var thumb = evt.target;\n    var cursorPos = getPosition(evt);\n    var thumbRect = thumb.getBoundingClientRect();\n    startTrackDirection = getTrackDirection(thumb); // pointer offset to thumb\n\n    startOffsetToThumb = {\n      x: cursorPos.x - thumbRect.left,\n      y: cursorPos.y - thumbRect.top\n    }; // container bounding rectangle\n\n    containerRect = container.getBoundingClientRect(); // prevent selection, see:\n    // https://github.com/idiotWu/smooth-scrollbar/issues/48\n\n    setStyle(scrollbar.containerEl, {\n      '-user-select': 'none'\n    });\n  });\n  addEvent(window, 'mousemove', function (evt) {\n    if (!isMouseDown) return;\n    isMouseMoving = true;\n    var offset = scrollbar.offset;\n    var cursorPos = getPosition(evt);\n\n    if (startTrackDirection === Direction.X) {\n      // get percentage of pointer position in track\n      // then tranform to px\n      // don't need easing\n      var offsetOnTrack = cursorPos.x - startOffsetToThumb.x - containerRect.left;\n      scrollbar.setPosition(calcOffset(startTrackDirection, offsetOnTrack), offset.y);\n    }\n\n    if (startTrackDirection === Direction.Y) {\n      var offsetOnTrack = cursorPos.y - startOffsetToThumb.y - containerRect.top;\n      scrollbar.setPosition(offset.x, calcOffset(startTrackDirection, offsetOnTrack));\n    }\n  });\n  addEvent(window, 'mouseup blur', function () {\n    isMouseDown = isMouseMoving = false;\n    setStyle(scrollbar.containerEl, {\n      '-user-select': ''\n    });\n  });\n}","map":{"version":3,"sources":["../src/events/mouse.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import clamp from 'lodash-es/clamp';\nimport { isOneOf, getPosition, eventScope, setStyle, } from '../utils/';\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"X\"] = 0] = \"X\";\n    Direction[Direction[\"Y\"] = 1] = \"Y\";\n})(Direction || (Direction = {}));\nexport function mouseHandler(scrollbar) {\n    var addEvent = eventScope(scrollbar);\n    var container = scrollbar.containerEl;\n    var _a = scrollbar.track, xAxis = _a.xAxis, yAxis = _a.yAxis;\n    function calcOffset(direction, clickPosition) {\n        var size = scrollbar.size;\n        if (direction === Direction.X) {\n            var totalWidth = size.container.width + (xAxis.thumb.realSize - xAxis.thumb.displaySize);\n            return clickPosition / totalWidth * size.content.width;\n        }\n        if (direction === Direction.Y) {\n            var totalHeight = size.container.height + (yAxis.thumb.realSize - yAxis.thumb.displaySize);\n            return clickPosition / totalHeight * size.content.height;\n        }\n        return 0;\n    }\n    function getTrackDirection(elem) {\n        if (isOneOf(elem, [xAxis.element, xAxis.thumb.element])) {\n            return Direction.X;\n        }\n        if (isOneOf(elem, [yAxis.element, yAxis.thumb.element])) {\n            return Direction.Y;\n        }\n        return void 0;\n    }\n    var isMouseDown;\n    var isMouseMoving;\n    var startOffsetToThumb;\n    var startTrackDirection;\n    var containerRect;\n    addEvent(container, 'click', function (evt) {\n        if (isMouseMoving || !isOneOf(evt.target, [xAxis.element, yAxis.element])) {\n            return;\n        }\n        var track = evt.target;\n        var direction = getTrackDirection(track);\n        var rect = track.getBoundingClientRect();\n        var clickPos = getPosition(evt);\n        var offset = scrollbar.offset, limit = scrollbar.limit;\n        if (direction === Direction.X) {\n            var offsetOnTrack = clickPos.x - rect.left - xAxis.thumb.displaySize / 2;\n            scrollbar.setMomentum(clamp(calcOffset(direction, offsetOnTrack) - offset.x, -offset.x, limit.x - offset.x), 0);\n        }\n        if (direction === Direction.Y) {\n            var offsetOnTrack = clickPos.y - rect.top - yAxis.thumb.displaySize / 2;\n            scrollbar.setMomentum(0, clamp(calcOffset(direction, offsetOnTrack) - offset.y, -offset.y, limit.y - offset.y));\n        }\n    });\n    addEvent(container, 'mousedown', function (evt) {\n        if (!isOneOf(evt.target, [xAxis.thumb.element, yAxis.thumb.element])) {\n            return;\n        }\n        isMouseDown = true;\n        var thumb = evt.target;\n        var cursorPos = getPosition(evt);\n        var thumbRect = thumb.getBoundingClientRect();\n        startTrackDirection = getTrackDirection(thumb);\n        // pointer offset to thumb\n        startOffsetToThumb = {\n            x: cursorPos.x - thumbRect.left,\n            y: cursorPos.y - thumbRect.top,\n        };\n        // container bounding rectangle\n        containerRect = container.getBoundingClientRect();\n        // prevent selection, see:\n        // https://github.com/idiotWu/smooth-scrollbar/issues/48\n        setStyle(scrollbar.containerEl, {\n            '-user-select': 'none',\n        });\n    });\n    addEvent(window, 'mousemove', function (evt) {\n        if (!isMouseDown)\n            return;\n        isMouseMoving = true;\n        var offset = scrollbar.offset;\n        var cursorPos = getPosition(evt);\n        if (startTrackDirection === Direction.X) {\n            // get percentage of pointer position in track\n            // then tranform to px\n            // don't need easing\n            var offsetOnTrack = cursorPos.x - startOffsetToThumb.x - containerRect.left;\n            scrollbar.setPosition(calcOffset(startTrackDirection, offsetOnTrack), offset.y);\n        }\n        if (startTrackDirection === Direction.Y) {\n            var offsetOnTrack = cursorPos.y - startOffsetToThumb.y - containerRect.top;\n            scrollbar.setPosition(offset.x, calcOffset(startTrackDirection, offsetOnTrack));\n        }\n    });\n    addEvent(window, 'mouseup blur', function () {\n        isMouseDown = isMouseMoving = false;\n        setStyle(scrollbar.containerEl, {\n            '-user-select': '',\n        });\n    });\n}\n//# sourceMappingURL=mouse.js.map"]},"metadata":{},"sourceType":"module"}