{"ast":null,"code":"import { __extends } from \"tslib\";\nimport './polyfills';\nimport { scrollbarMap, Scrollbar } from './scrollbar';\nimport { addPlugins, ScrollbarPlugin } from './plugin';\nimport { attachStyle, detachStyle } from './style';\nexport { ScrollbarPlugin };\n/*!\n * cast `I.Scrollbar` to `Scrollbar` to avoid error\n *\n * `I.Scrollbar` is not assignable to `Scrollbar`:\n *     \"privateProp\" is missing in `I.Scrollbar`\n *\n * @see https://github.com/Microsoft/TypeScript/issues/2672\n */\n\nvar SmoothScrollbar =\n/** @class */\nfunction (_super) {\n  __extends(SmoothScrollbar, _super);\n\n  function SmoothScrollbar() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Initializes a scrollbar on the given element.\n   *\n   * @param elem The DOM element that you want to initialize scrollbar to\n   * @param [options] Initial options\n   */\n\n\n  SmoothScrollbar.init = function (elem, options) {\n    if (!elem || elem.nodeType !== 1) {\n      throw new TypeError(\"expect element to be DOM Element, but got \" + elem);\n    } // attach stylesheet\n\n\n    attachStyle();\n\n    if (scrollbarMap.has(elem)) {\n      return scrollbarMap.get(elem);\n    }\n\n    return new Scrollbar(elem, options);\n  };\n  /**\n   * Automatically init scrollbar on all elements base on the selector `[data-scrollbar]`\n   *\n   * @param options Initial options\n   */\n\n\n  SmoothScrollbar.initAll = function (options) {\n    return Array.from(document.querySelectorAll('[data-scrollbar]'), function (elem) {\n      return SmoothScrollbar.init(elem, options);\n    });\n  };\n  /**\n   * Check if there is a scrollbar on given element\n   *\n   * @param elem The DOM element that you want to check\n   */\n\n\n  SmoothScrollbar.has = function (elem) {\n    return scrollbarMap.has(elem);\n  };\n  /**\n   * Gets scrollbar on the given element.\n   * If no scrollbar instance exsits, returns `undefined`\n   *\n   * @param elem The DOM element that you want to check.\n   */\n\n\n  SmoothScrollbar.get = function (elem) {\n    return scrollbarMap.get(elem);\n  };\n  /**\n   * Returns an array that contains all scrollbar instances\n   */\n\n\n  SmoothScrollbar.getAll = function () {\n    return Array.from(scrollbarMap.values());\n  };\n  /**\n   * Removes scrollbar on the given element\n   */\n\n\n  SmoothScrollbar.destroy = function (elem) {\n    var scrollbar = scrollbarMap.get(elem);\n\n    if (scrollbar) {\n      scrollbar.destroy();\n    }\n  };\n  /**\n   * Removes all scrollbar instances from current document\n   */\n\n\n  SmoothScrollbar.destroyAll = function () {\n    scrollbarMap.forEach(function (scrollbar) {\n      scrollbar.destroy();\n    });\n  };\n  /**\n   * Attaches plugins to scrollbars\n   *\n   * @param ...Plugins Scrollbar plugin classes\n   */\n\n\n  SmoothScrollbar.use = function () {\n    var Plugins = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      Plugins[_i] = arguments[_i];\n    }\n\n    return addPlugins.apply(void 0, Plugins);\n  };\n  /**\n   * Attaches default style sheets to current document.\n   * You don't need to call this method manually unless\n   * you removed the default styles via `Scrollbar.detachStyle()`\n   */\n\n\n  SmoothScrollbar.attachStyle = function () {\n    return attachStyle();\n  };\n  /**\n   * Removes default styles from current document.\n   * Use this method when you want to use your own css for scrollbars.\n   */\n\n\n  SmoothScrollbar.detachStyle = function () {\n    return detachStyle();\n  };\n\n  SmoothScrollbar.version = \"8.6.2\";\n  SmoothScrollbar.ScrollbarPlugin = ScrollbarPlugin;\n  return SmoothScrollbar;\n}(Scrollbar);\n\nexport default SmoothScrollbar;","map":{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport './polyfills';\nimport { scrollbarMap, Scrollbar, } from './scrollbar';\nimport { addPlugins, ScrollbarPlugin, } from './plugin';\nimport { attachStyle, detachStyle, } from './style';\nexport { ScrollbarPlugin };\n/*!\n * cast `I.Scrollbar` to `Scrollbar` to avoid error\n *\n * `I.Scrollbar` is not assignable to `Scrollbar`:\n *     \"privateProp\" is missing in `I.Scrollbar`\n *\n * @see https://github.com/Microsoft/TypeScript/issues/2672\n */\nvar SmoothScrollbar = /** @class */ (function (_super) {\n    __extends(SmoothScrollbar, _super);\n    function SmoothScrollbar() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Initializes a scrollbar on the given element.\n     *\n     * @param elem The DOM element that you want to initialize scrollbar to\n     * @param [options] Initial options\n     */\n    SmoothScrollbar.init = function (elem, options) {\n        if (!elem || elem.nodeType !== 1) {\n            throw new TypeError(\"expect element to be DOM Element, but got \" + elem);\n        }\n        // attach stylesheet\n        attachStyle();\n        if (scrollbarMap.has(elem)) {\n            return scrollbarMap.get(elem);\n        }\n        return new Scrollbar(elem, options);\n    };\n    /**\n     * Automatically init scrollbar on all elements base on the selector `[data-scrollbar]`\n     *\n     * @param options Initial options\n     */\n    SmoothScrollbar.initAll = function (options) {\n        return Array.from(document.querySelectorAll('[data-scrollbar]'), function (elem) {\n            return SmoothScrollbar.init(elem, options);\n        });\n    };\n    /**\n     * Check if there is a scrollbar on given element\n     *\n     * @param elem The DOM element that you want to check\n     */\n    SmoothScrollbar.has = function (elem) {\n        return scrollbarMap.has(elem);\n    };\n    /**\n     * Gets scrollbar on the given element.\n     * If no scrollbar instance exsits, returns `undefined`\n     *\n     * @param elem The DOM element that you want to check.\n     */\n    SmoothScrollbar.get = function (elem) {\n        return scrollbarMap.get(elem);\n    };\n    /**\n     * Returns an array that contains all scrollbar instances\n     */\n    SmoothScrollbar.getAll = function () {\n        return Array.from(scrollbarMap.values());\n    };\n    /**\n     * Removes scrollbar on the given element\n     */\n    SmoothScrollbar.destroy = function (elem) {\n        var scrollbar = scrollbarMap.get(elem);\n        if (scrollbar) {\n            scrollbar.destroy();\n        }\n    };\n    /**\n     * Removes all scrollbar instances from current document\n     */\n    SmoothScrollbar.destroyAll = function () {\n        scrollbarMap.forEach(function (scrollbar) {\n            scrollbar.destroy();\n        });\n    };\n    /**\n     * Attaches plugins to scrollbars\n     *\n     * @param ...Plugins Scrollbar plugin classes\n     */\n    SmoothScrollbar.use = function () {\n        var Plugins = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            Plugins[_i] = arguments[_i];\n        }\n        return addPlugins.apply(void 0, Plugins);\n    };\n    /**\n     * Attaches default style sheets to current document.\n     * You don't need to call this method manually unless\n     * you removed the default styles via `Scrollbar.detachStyle()`\n     */\n    SmoothScrollbar.attachStyle = function () {\n        return attachStyle();\n    };\n    /**\n     * Removes default styles from current document.\n     * Use this method when you want to use your own css for scrollbars.\n     */\n    SmoothScrollbar.detachStyle = function () {\n        return detachStyle();\n    };\n    SmoothScrollbar.version = \"8.6.2\";\n    SmoothScrollbar.ScrollbarPlugin = ScrollbarPlugin;\n    return SmoothScrollbar;\n}(Scrollbar));\nexport default SmoothScrollbar;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}