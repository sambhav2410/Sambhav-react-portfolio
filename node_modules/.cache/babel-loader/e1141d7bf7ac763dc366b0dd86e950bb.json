{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { ScrollbarTrack } from './track';\nimport { TrackDirection } from './direction';\nimport { debounce } from '../decorators/';\n\nvar TrackController =\n/** @class */\nfunction () {\n  function TrackController(_scrollbar) {\n    this._scrollbar = _scrollbar;\n    var thumbMinSize = _scrollbar.options.thumbMinSize;\n    this.xAxis = new ScrollbarTrack(TrackDirection.X, thumbMinSize);\n    this.yAxis = new ScrollbarTrack(TrackDirection.Y, thumbMinSize);\n    this.xAxis.attachTo(_scrollbar.containerEl);\n    this.yAxis.attachTo(_scrollbar.containerEl);\n\n    if (_scrollbar.options.alwaysShowTracks) {\n      this.xAxis.show();\n      this.yAxis.show();\n    }\n  }\n  /**\n   * Updates track appearance\n   */\n\n\n  TrackController.prototype.update = function () {\n    var _a = this._scrollbar,\n        size = _a.size,\n        offset = _a.offset;\n    this.xAxis.update(offset.x, size.container.width, size.content.width);\n    this.yAxis.update(offset.y, size.container.height, size.content.height);\n  };\n  /**\n   * Automatically hide tracks when scrollbar is in idle state\n   */\n\n\n  TrackController.prototype.autoHideOnIdle = function () {\n    if (this._scrollbar.options.alwaysShowTracks) {\n      return;\n    }\n\n    this.xAxis.hide();\n    this.yAxis.hide();\n  };\n\n  __decorate([debounce(300)], TrackController.prototype, \"autoHideOnIdle\", null);\n\n  return TrackController;\n}();\n\nexport { TrackController };","map":{"version":3,"sources":["../src/track/index.ts"],"names":[],"mappings":";AAEA,SAAS,cAAT,QAA+B,SAA/B;AACA,SAAS,cAAT,QAA+B,aAA/B;AAEA,SACE,QADF,QAEO,gBAFP;;AAIA,IAAA,eAAA;AAAA;AAAA,YAAA;AAIE,WAAA,eAAA,CACU,UADV,EACiC;AAAvB,SAAA,UAAA,GAAA,UAAA;AAER,QAAM,YAAY,GAAG,UAAU,CAAC,OAAX,CAAmB,YAAxC;AAEA,SAAK,KAAL,GAAa,IAAI,cAAJ,CAAmB,cAAc,CAAC,CAAlC,EAAqC,YAArC,CAAb;AACA,SAAK,KAAL,GAAa,IAAI,cAAJ,CAAmB,cAAc,CAAC,CAAlC,EAAqC,YAArC,CAAb;AAEA,SAAK,KAAL,CAAW,QAAX,CAAoB,UAAU,CAAC,WAA/B;AACA,SAAK,KAAL,CAAW,QAAX,CAAoB,UAAU,CAAC,WAA/B;;AAEA,QAAI,UAAU,CAAC,OAAX,CAAmB,gBAAvB,EAAyC;AACvC,WAAK,KAAL,CAAW,IAAX;AACA,WAAK,KAAL,CAAW,IAAX;AACD;AACF;AAED;;AAEG;;;AACH,EAAA,eAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACQ,QAAA,EAAA,GAAA,KAAA,UAAA;AAAA,QACJ,IAAA,GAAA,EAAA,CAAA,IADI;AAAA,QAEJ,MAAA,GAAA,EAAA,CAAA,MAFI;AAKN,SAAK,KAAL,CAAW,MAAX,CAAkB,MAAM,CAAC,CAAzB,EAA4B,IAAI,CAAC,SAAL,CAAe,KAA3C,EAAkD,IAAI,CAAC,OAAL,CAAa,KAA/D;AACA,SAAK,KAAL,CAAW,MAAX,CAAkB,MAAM,CAAC,CAAzB,EAA4B,IAAI,CAAC,SAAL,CAAe,MAA3C,EAAmD,IAAI,CAAC,OAAL,CAAa,MAAhE;AACD,GARD;AAUA;;AAEG;;;AAEH,EAAA,eAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE,QAAI,KAAK,UAAL,CAAgB,OAAhB,CAAwB,gBAA5B,EAA8C;AAC5C;AACD;;AAED,SAAK,KAAL,CAAW,IAAX;AACA,SAAK,KAAL,CAAW,IAAX;AACD,GAPD;;AAAA,EAAA,UAAA,CAAA,CADC,QAAQ,CAAC,GAAD,CACT,CAAA,E,yBAAA,E,gBAAA,EAOC,IAPD,CAAA;;AAQF,SAAA,eAAA;AAAC,CA9CD,EAAA;;SAAa,e","sourceRoot":"","sourcesContent":["import { __decorate } from \"tslib\";\nimport { ScrollbarTrack } from './track';\nimport { TrackDirection } from './direction';\nimport { debounce, } from '../decorators/';\nvar TrackController = /** @class */ (function () {\n    function TrackController(_scrollbar) {\n        this._scrollbar = _scrollbar;\n        var thumbMinSize = _scrollbar.options.thumbMinSize;\n        this.xAxis = new ScrollbarTrack(TrackDirection.X, thumbMinSize);\n        this.yAxis = new ScrollbarTrack(TrackDirection.Y, thumbMinSize);\n        this.xAxis.attachTo(_scrollbar.containerEl);\n        this.yAxis.attachTo(_scrollbar.containerEl);\n        if (_scrollbar.options.alwaysShowTracks) {\n            this.xAxis.show();\n            this.yAxis.show();\n        }\n    }\n    /**\n     * Updates track appearance\n     */\n    TrackController.prototype.update = function () {\n        var _a = this._scrollbar, size = _a.size, offset = _a.offset;\n        this.xAxis.update(offset.x, size.container.width, size.content.width);\n        this.yAxis.update(offset.y, size.container.height, size.content.height);\n    };\n    /**\n     * Automatically hide tracks when scrollbar is in idle state\n     */\n    TrackController.prototype.autoHideOnIdle = function () {\n        if (this._scrollbar.options.alwaysShowTracks) {\n            return;\n        }\n        this.xAxis.hide();\n        this.yAxis.hide();\n    };\n    __decorate([\n        debounce(300)\n    ], TrackController.prototype, \"autoHideOnIdle\", null);\n    return TrackController;\n}());\nexport { TrackController };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}