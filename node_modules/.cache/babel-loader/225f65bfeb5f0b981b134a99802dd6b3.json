{"ast":null,"code":"import { TrackDirection } from './direction';\nimport { setStyle } from '../utils/';\n\nvar ScrollbarThumb =\n/** @class */\nfunction () {\n  function ScrollbarThumb(_direction, _minSize) {\n    if (_minSize === void 0) {\n      _minSize = 0;\n    }\n\n    this._direction = _direction;\n    this._minSize = _minSize;\n    /**\n     * Thumb element\n     */\n\n    this.element = document.createElement('div');\n    /**\n     * Display size of the thumb\n     * will always be greater than `scrollbar.options.thumbMinSize`\n     */\n\n    this.displaySize = 0;\n    /**\n     * Actual size of the thumb\n     */\n\n    this.realSize = 0;\n    /**\n     * Thumb offset to the top\n     */\n\n    this.offset = 0;\n    this.element.className = \"scrollbar-thumb scrollbar-thumb-\" + _direction;\n  }\n  /**\n   * Attach to track element\n   *\n   * @param trackEl Track element\n   */\n\n\n  ScrollbarThumb.prototype.attachTo = function (trackEl) {\n    trackEl.appendChild(this.element);\n  };\n\n  ScrollbarThumb.prototype.update = function (scrollOffset, containerSize, pageSize) {\n    // calculate thumb size\n    // pageSize > containerSize -> scrollable\n    this.realSize = Math.min(containerSize / pageSize, 1) * containerSize;\n    this.displaySize = Math.max(this.realSize, this._minSize); // calculate thumb offset\n\n    this.offset = scrollOffset / pageSize * (containerSize + (this.realSize - this.displaySize));\n    setStyle(this.element, this._getStyle());\n  };\n\n  ScrollbarThumb.prototype._getStyle = function () {\n    switch (this._direction) {\n      case TrackDirection.X:\n        return {\n          width: this.displaySize + \"px\",\n          '-transform': \"translate3d(\" + this.offset + \"px, 0, 0)\"\n        };\n\n      case TrackDirection.Y:\n        return {\n          height: this.displaySize + \"px\",\n          '-transform': \"translate3d(0, \" + this.offset + \"px, 0)\"\n        };\n\n      default:\n        return null;\n    }\n  };\n\n  return ScrollbarThumb;\n}();\n\nexport { ScrollbarThumb };","map":{"version":3,"sources":["../src/track/thumb.ts"],"names":[],"mappings":"AACA,SAAS,cAAT,QAA+B,aAA/B;AACA,SAAS,QAAT,QAAyB,WAAzB;;AAEA,IAAA,cAAA;AAAA;AAAA,YAAA;AAsBE,WAAA,cAAA,CACU,UADV,EAEU,QAFV,EAEsB;AAAZ,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,CAAA;AAAY;;AADZ,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,QAAA,GAAA,QAAA;AAvBV;;AAEG;;AACM,SAAA,OAAA,GAAU,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAV;AAET;;;AAGG;;AACH,SAAA,WAAA,GAAc,CAAd;AAEA;;AAEG;;AACH,SAAA,QAAA,GAAW,CAAX;AAEA;;AAEG;;AACH,SAAA,MAAA,GAAS,CAAT;AAME,SAAK,OAAL,CAAa,SAAb,GAAyB,qCAAmC,UAA5D;AACD;AAED;;;;AAIG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,OAAT,EAA6B;AAC3B,IAAA,OAAO,CAAC,WAAR,CAAoB,KAAK,OAAzB;AACD,GAFD;;AAIA,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UACE,YADF,EAEE,aAFF,EAGE,QAHF,EAGkB;AAEhB;AACA;AACA,SAAK,QAAL,GAAgB,IAAI,CAAC,GAAL,CAAS,aAAa,GAAG,QAAzB,EAAmC,CAAnC,IAAwC,aAAxD;AACA,SAAK,WAAL,GAAmB,IAAI,CAAC,GAAL,CAAS,KAAK,QAAd,EAAwB,KAAK,QAA7B,CAAnB,CALgB,CAOhB;;AACA,SAAK,MAAL,GAAc,YAAY,GAAG,QAAf,IAA2B,aAAa,IAAI,KAAK,QAAL,GAAgB,KAAK,WAAzB,CAAxC,CAAd;AAEA,IAAA,QAAQ,CAAC,KAAK,OAAN,EAAe,KAAK,SAAL,EAAf,CAAR;AACD,GAdD;;AAgBQ,EAAA,cAAA,CAAA,SAAA,CAAA,SAAA,GAAR,YAAA;AACE,YAAQ,KAAK,UAAb;AACE,WAAK,cAAc,CAAC,CAApB;AACE,eAAO;AACL,UAAA,KAAK,EAAK,KAAK,WAAL,GAAgB,IADrB;AAEL,wBAAc,iBAAe,KAAK,MAApB,GAA0B;AAFnC,SAAP;;AAKF,WAAK,cAAc,CAAC,CAApB;AACE,eAAO;AACL,UAAA,MAAM,EAAK,KAAK,WAAL,GAAgB,IADtB;AAEL,wBAAc,oBAAkB,KAAK,MAAvB,GAA6B;AAFtC,SAAP;;AAKF;AACE,eAAO,IAAP;AAdJ;AAgBD,GAjBO;;AAkBV,SAAA,cAAA;AAAC,CAxED,EAAA","sourceRoot":"","sourcesContent":["import { TrackDirection } from './direction';\nimport { setStyle } from '../utils/';\nvar ScrollbarThumb = /** @class */ (function () {\n    function ScrollbarThumb(_direction, _minSize) {\n        if (_minSize === void 0) { _minSize = 0; }\n        this._direction = _direction;\n        this._minSize = _minSize;\n        /**\n         * Thumb element\n         */\n        this.element = document.createElement('div');\n        /**\n         * Display size of the thumb\n         * will always be greater than `scrollbar.options.thumbMinSize`\n         */\n        this.displaySize = 0;\n        /**\n         * Actual size of the thumb\n         */\n        this.realSize = 0;\n        /**\n         * Thumb offset to the top\n         */\n        this.offset = 0;\n        this.element.className = \"scrollbar-thumb scrollbar-thumb-\" + _direction;\n    }\n    /**\n     * Attach to track element\n     *\n     * @param trackEl Track element\n     */\n    ScrollbarThumb.prototype.attachTo = function (trackEl) {\n        trackEl.appendChild(this.element);\n    };\n    ScrollbarThumb.prototype.update = function (scrollOffset, containerSize, pageSize) {\n        // calculate thumb size\n        // pageSize > containerSize -> scrollable\n        this.realSize = Math.min(containerSize / pageSize, 1) * containerSize;\n        this.displaySize = Math.max(this.realSize, this._minSize);\n        // calculate thumb offset\n        this.offset = scrollOffset / pageSize * (containerSize + (this.realSize - this.displaySize));\n        setStyle(this.element, this._getStyle());\n    };\n    ScrollbarThumb.prototype._getStyle = function () {\n        switch (this._direction) {\n            case TrackDirection.X:\n                return {\n                    width: this.displaySize + \"px\",\n                    '-transform': \"translate3d(\" + this.offset + \"px, 0, 0)\",\n                };\n            case TrackDirection.Y:\n                return {\n                    height: this.displaySize + \"px\",\n                    '-transform': \"translate3d(0, \" + this.offset + \"px, 0)\",\n                };\n            default:\n                return null;\n        }\n    };\n    return ScrollbarThumb;\n}());\nexport { ScrollbarThumb };\n//# sourceMappingURL=thumb.js.map"]},"metadata":{},"sourceType":"module"}