{"ast":null,"code":"import { __assign, __decorate } from \"tslib\";\nimport clamp from 'lodash-es/clamp';\nimport { Options } from './options';\nimport { setStyle, clearEventsOn } from './utils/';\nimport { debounce } from './decorators/';\nimport { TrackController } from './track/';\nimport { getSize, update, isVisible } from './geometry/';\nimport { scrollTo, setPosition, scrollIntoView } from './scrolling/';\nimport { initPlugins } from './plugin';\nimport * as eventHandlers from './events/'; // DO NOT use WeakMap here\n// .getAll() methods requires `scrollbarMap.values()`\n\nexport var scrollbarMap = new Map();\n\nvar Scrollbar =\n/** @class */\nfunction () {\n  function Scrollbar(containerEl, options) {\n    var _this = this;\n    /**\n     * Current scrolling offsets\n     */\n\n\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * Max-allowed scrolling offsets\n     */\n\n    this.limit = {\n      x: Infinity,\n      y: Infinity\n    };\n    /**\n     * Container bounding rect\n     */\n\n    this.bounding = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n    this._plugins = [];\n    this._momentum = {\n      x: 0,\n      y: 0\n    };\n    this._listeners = new Set();\n    this.containerEl = containerEl;\n    var contentEl = this.contentEl = document.createElement('div');\n    this.options = new Options(options); // mark as a scroll element\n\n    containerEl.setAttribute('data-scrollbar', 'true'); // make container focusable\n\n    containerEl.setAttribute('tabindex', '-1');\n    setStyle(containerEl, {\n      overflow: 'hidden',\n      outline: 'none'\n    }); // enable touch event capturing in IE, see:\n    // https://github.com/idiotWu/smooth-scrollbar/issues/39\n\n    if (window.navigator.msPointerEnabled) {\n      containerEl.style.msTouchAction = 'none';\n    } // mount content\n\n\n    contentEl.className = 'scroll-content';\n    Array.from(containerEl.childNodes).forEach(function (node) {\n      contentEl.appendChild(node);\n    });\n    containerEl.appendChild(contentEl); // attach track\n\n    this.track = new TrackController(this); // initial measuring\n\n    this.size = this.getSize(); // init plugins\n\n    this._plugins = initPlugins(this, this.options.plugins); // preserve scroll offset\n\n    var scrollLeft = containerEl.scrollLeft,\n        scrollTop = containerEl.scrollTop;\n    containerEl.scrollLeft = containerEl.scrollTop = 0;\n    this.setPosition(scrollLeft, scrollTop, {\n      withoutCallbacks: true\n    });\n    var global = window;\n    var MutationObserver = global.MutationObserver || global.WebKitMutationObserver || global.MozMutationObserver; // observe\n\n    if (typeof MutationObserver === 'function') {\n      this._observer = new MutationObserver(function () {\n        _this.update();\n      });\n\n      this._observer.observe(contentEl, {\n        subtree: true,\n        childList: true\n      });\n    }\n\n    scrollbarMap.set(containerEl, this); // wait for DOM ready\n\n    requestAnimationFrame(function () {\n      _this._init();\n    });\n  }\n\n  Object.defineProperty(Scrollbar.prototype, \"parent\", {\n    /**\n     * Parent scrollbar\n     */\n    get: function () {\n      var elem = this.containerEl.parentElement;\n\n      while (elem) {\n        var parentScrollbar = scrollbarMap.get(elem);\n\n        if (parentScrollbar) {\n          return parentScrollbar;\n        }\n\n        elem = elem.parentElement;\n      }\n\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"scrollTop\", {\n    /**\n     * Gets or sets `scrollbar.offset.y`\n     */\n    get: function () {\n      return this.offset.y;\n    },\n    set: function (y) {\n      this.setPosition(this.scrollLeft, y);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"scrollLeft\", {\n    /**\n     * Gets or sets `scrollbar.offset.x`\n     */\n    get: function () {\n      return this.offset.x;\n    },\n    set: function (x) {\n      this.setPosition(x, this.scrollTop);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns the size of the scrollbar container element\n   * and the content wrapper element\n   */\n\n  Scrollbar.prototype.getSize = function () {\n    return getSize(this);\n  };\n  /**\n   * Forces scrollbar to update geometry infomation.\n   *\n   * By default, scrollbars are automatically updated with `100ms` debounce (or `MutationObserver` fires).\n   * You can call this method to force an update when you modified contents\n   */\n\n\n  Scrollbar.prototype.update = function () {\n    update(this);\n\n    this._plugins.forEach(function (plugin) {\n      plugin.onUpdate();\n    });\n  };\n  /**\n   * Checks if an element is visible in the current view area\n   */\n\n\n  Scrollbar.prototype.isVisible = function (elem) {\n    return isVisible(this, elem);\n  };\n  /**\n   * Sets the scrollbar to the given offset without easing\n   */\n\n\n  Scrollbar.prototype.setPosition = function (x, y, options) {\n    var _this = this;\n\n    if (x === void 0) {\n      x = this.offset.x;\n    }\n\n    if (y === void 0) {\n      y = this.offset.y;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var status = setPosition(this, x, y);\n\n    if (!status || options.withoutCallbacks) {\n      return;\n    }\n\n    this._listeners.forEach(function (fn) {\n      fn.call(_this, status);\n    });\n  };\n  /**\n   * Scrolls to given position with easing function\n   */\n\n\n  Scrollbar.prototype.scrollTo = function (x, y, duration, options) {\n    if (x === void 0) {\n      x = this.offset.x;\n    }\n\n    if (y === void 0) {\n      y = this.offset.y;\n    }\n\n    if (duration === void 0) {\n      duration = 0;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    scrollTo(this, x, y, duration, options);\n  };\n  /**\n   * Scrolls the target element into visible area of scrollbar,\n   * likes the DOM method `element.scrollIntoView().\n   */\n\n\n  Scrollbar.prototype.scrollIntoView = function (elem, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    scrollIntoView(this, elem, options);\n  };\n  /**\n   * Adds scrolling listener\n   */\n\n\n  Scrollbar.prototype.addListener = function (fn) {\n    if (typeof fn !== 'function') {\n      throw new TypeError('[smooth-scrollbar] scrolling listener should be a function');\n    }\n\n    this._listeners.add(fn);\n  };\n  /**\n   * Removes listener previously registered with `scrollbar.addListener()`\n   */\n\n\n  Scrollbar.prototype.removeListener = function (fn) {\n    this._listeners.delete(fn);\n  };\n  /**\n   * Adds momentum and applys delta transformers.\n   */\n\n\n  Scrollbar.prototype.addTransformableMomentum = function (x, y, fromEvent, callback) {\n    this._updateDebounced();\n\n    var finalDelta = this._plugins.reduce(function (delta, plugin) {\n      return plugin.transformDelta(delta, fromEvent) || delta;\n    }, {\n      x: x,\n      y: y\n    });\n\n    var willScroll = !this._shouldPropagateMomentum(finalDelta.x, finalDelta.y);\n\n    if (willScroll) {\n      this.addMomentum(finalDelta.x, finalDelta.y);\n    }\n\n    if (callback) {\n      callback.call(this, willScroll);\n    }\n  };\n  /**\n   * Increases scrollbar's momentum\n   */\n\n\n  Scrollbar.prototype.addMomentum = function (x, y) {\n    this.setMomentum(this._momentum.x + x, this._momentum.y + y);\n  };\n  /**\n   * Sets scrollbar's momentum to given value\n   */\n\n\n  Scrollbar.prototype.setMomentum = function (x, y) {\n    if (this.limit.x === 0) {\n      x = 0;\n    }\n\n    if (this.limit.y === 0) {\n      y = 0;\n    }\n\n    if (this.options.renderByPixels) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n\n    this._momentum.x = x;\n    this._momentum.y = y;\n  };\n  /**\n   * Update options for specific plugin\n   *\n   * @param pluginName Name of the plugin\n   * @param [options] An object includes the properties that you want to update\n   */\n\n\n  Scrollbar.prototype.updatePluginOptions = function (pluginName, options) {\n    this._plugins.forEach(function (plugin) {\n      if (plugin.name === pluginName) {\n        Object.assign(plugin.options, options);\n      }\n    });\n  };\n\n  Scrollbar.prototype.destroy = function () {\n    var _a = this,\n        containerEl = _a.containerEl,\n        contentEl = _a.contentEl;\n\n    clearEventsOn(this);\n\n    this._listeners.clear();\n\n    this.setMomentum(0, 0);\n    cancelAnimationFrame(this._renderID);\n\n    if (this._observer) {\n      this._observer.disconnect();\n    }\n\n    scrollbarMap.delete(this.containerEl); // restore contents\n\n    var childNodes = Array.from(contentEl.childNodes);\n\n    while (containerEl.firstChild) {\n      containerEl.removeChild(containerEl.firstChild);\n    }\n\n    childNodes.forEach(function (el) {\n      containerEl.appendChild(el);\n    }); // reset scroll position\n\n    setStyle(containerEl, {\n      overflow: ''\n    });\n    containerEl.scrollTop = this.scrollTop;\n    containerEl.scrollLeft = this.scrollLeft; // invoke plugin.onDestroy\n\n    this._plugins.forEach(function (plugin) {\n      plugin.onDestroy();\n    });\n\n    this._plugins.length = 0;\n  };\n\n  Scrollbar.prototype._init = function () {\n    var _this = this;\n\n    this.update(); // init evet handlers\n\n    Object.keys(eventHandlers).forEach(function (prop) {\n      eventHandlers[prop](_this);\n    }); // invoke `plugin.onInit`\n\n    this._plugins.forEach(function (plugin) {\n      plugin.onInit();\n    });\n\n    this._render();\n  };\n\n  Scrollbar.prototype._updateDebounced = function () {\n    this.update();\n  }; // check whether to propagate monmentum to parent scrollbar\n  // the following situations are considered as `true`:\n  //         1. continuous scrolling is enabled (automatically disabled when overscroll is enabled)\n  //         2. scrollbar reaches one side and is not about to scroll on the other direction\n\n\n  Scrollbar.prototype._shouldPropagateMomentum = function (deltaX, deltaY) {\n    if (deltaX === void 0) {\n      deltaX = 0;\n    }\n\n    if (deltaY === void 0) {\n      deltaY = 0;\n    }\n\n    var _a = this,\n        options = _a.options,\n        offset = _a.offset,\n        limit = _a.limit;\n\n    if (!options.continuousScrolling) return false; // force an update when scrollbar is \"unscrollable\", see #106\n\n    if (limit.x === 0 && limit.y === 0) {\n      this._updateDebounced();\n    }\n\n    var destX = clamp(deltaX + offset.x, 0, limit.x);\n    var destY = clamp(deltaY + offset.y, 0, limit.y);\n    var res = true; // offsets are not about to change\n    // `&=` operator is not allowed for boolean types\n\n    res = res && destX === offset.x;\n    res = res && destY === offset.y; // current offsets are on the edge\n\n    res = res && (offset.x === limit.x || offset.x === 0 || offset.y === limit.y || offset.y === 0);\n    return res;\n  };\n\n  Scrollbar.prototype._render = function () {\n    var _momentum = this._momentum;\n\n    if (_momentum.x || _momentum.y) {\n      var nextX = this._nextTick('x');\n\n      var nextY = this._nextTick('y');\n\n      _momentum.x = nextX.momentum;\n      _momentum.y = nextY.momentum;\n      this.setPosition(nextX.position, nextY.position);\n    }\n\n    var remain = __assign({}, this._momentum);\n\n    this._plugins.forEach(function (plugin) {\n      plugin.onRender(remain);\n    });\n\n    this._renderID = requestAnimationFrame(this._render.bind(this));\n  };\n\n  Scrollbar.prototype._nextTick = function (direction) {\n    var _a = this,\n        options = _a.options,\n        offset = _a.offset,\n        _momentum = _a._momentum;\n\n    var current = offset[direction];\n    var remain = _momentum[direction];\n\n    if (Math.abs(remain) <= 0.1) {\n      return {\n        momentum: 0,\n        position: current + remain\n      };\n    }\n\n    var nextMomentum = remain * (1 - options.damping);\n\n    if (options.renderByPixels) {\n      nextMomentum |= 0;\n    }\n\n    return {\n      momentum: nextMomentum,\n      position: current + remain - nextMomentum\n    };\n  };\n\n  __decorate([debounce(100, {\n    leading: true\n  })], Scrollbar.prototype, \"_updateDebounced\", null);\n\n  return Scrollbar;\n}();\n\nexport { Scrollbar };","map":{"version":3,"sources":["src/scrollbar.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __decorate } from \"tslib\";\nimport clamp from 'lodash-es/clamp';\nimport { Options } from './options';\nimport { setStyle, clearEventsOn, } from './utils/';\nimport { debounce, } from './decorators/';\nimport { TrackController, } from './track/';\nimport { getSize, update, isVisible, } from './geometry/';\nimport { scrollTo, setPosition, scrollIntoView, } from './scrolling/';\nimport { initPlugins, } from './plugin';\nimport * as eventHandlers from './events/';\n// DO NOT use WeakMap here\n// .getAll() methods requires `scrollbarMap.values()`\nexport var scrollbarMap = new Map();\nvar Scrollbar = /** @class */ (function () {\n    function Scrollbar(containerEl, options) {\n        var _this = this;\n        /**\n         * Current scrolling offsets\n         */\n        this.offset = {\n            x: 0,\n            y: 0,\n        };\n        /**\n         * Max-allowed scrolling offsets\n         */\n        this.limit = {\n            x: Infinity,\n            y: Infinity,\n        };\n        /**\n         * Container bounding rect\n         */\n        this.bounding = {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n        };\n        this._plugins = [];\n        this._momentum = { x: 0, y: 0 };\n        this._listeners = new Set();\n        this.containerEl = containerEl;\n        var contentEl = this.contentEl = document.createElement('div');\n        this.options = new Options(options);\n        // mark as a scroll element\n        containerEl.setAttribute('data-scrollbar', 'true');\n        // make container focusable\n        containerEl.setAttribute('tabindex', '-1');\n        setStyle(containerEl, {\n            overflow: 'hidden',\n            outline: 'none',\n        });\n        // enable touch event capturing in IE, see:\n        // https://github.com/idiotWu/smooth-scrollbar/issues/39\n        if (window.navigator.msPointerEnabled) {\n            containerEl.style.msTouchAction = 'none';\n        }\n        // mount content\n        contentEl.className = 'scroll-content';\n        Array.from(containerEl.childNodes).forEach(function (node) {\n            contentEl.appendChild(node);\n        });\n        containerEl.appendChild(contentEl);\n        // attach track\n        this.track = new TrackController(this);\n        // initial measuring\n        this.size = this.getSize();\n        // init plugins\n        this._plugins = initPlugins(this, this.options.plugins);\n        // preserve scroll offset\n        var scrollLeft = containerEl.scrollLeft, scrollTop = containerEl.scrollTop;\n        containerEl.scrollLeft = containerEl.scrollTop = 0;\n        this.setPosition(scrollLeft, scrollTop, {\n            withoutCallbacks: true,\n        });\n        var global = window;\n        var MutationObserver = global.MutationObserver || global.WebKitMutationObserver || global.MozMutationObserver;\n        // observe\n        if (typeof MutationObserver === 'function') {\n            this._observer = new MutationObserver(function () {\n                _this.update();\n            });\n            this._observer.observe(contentEl, {\n                subtree: true,\n                childList: true,\n            });\n        }\n        scrollbarMap.set(containerEl, this);\n        // wait for DOM ready\n        requestAnimationFrame(function () {\n            _this._init();\n        });\n    }\n    Object.defineProperty(Scrollbar.prototype, \"parent\", {\n        /**\n         * Parent scrollbar\n         */\n        get: function () {\n            var elem = this.containerEl.parentElement;\n            while (elem) {\n                var parentScrollbar = scrollbarMap.get(elem);\n                if (parentScrollbar) {\n                    return parentScrollbar;\n                }\n                elem = elem.parentElement;\n            }\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Scrollbar.prototype, \"scrollTop\", {\n        /**\n         * Gets or sets `scrollbar.offset.y`\n         */\n        get: function () {\n            return this.offset.y;\n        },\n        set: function (y) {\n            this.setPosition(this.scrollLeft, y);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Scrollbar.prototype, \"scrollLeft\", {\n        /**\n         * Gets or sets `scrollbar.offset.x`\n         */\n        get: function () {\n            return this.offset.x;\n        },\n        set: function (x) {\n            this.setPosition(x, this.scrollTop);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the size of the scrollbar container element\n     * and the content wrapper element\n     */\n    Scrollbar.prototype.getSize = function () {\n        return getSize(this);\n    };\n    /**\n     * Forces scrollbar to update geometry infomation.\n     *\n     * By default, scrollbars are automatically updated with `100ms` debounce (or `MutationObserver` fires).\n     * You can call this method to force an update when you modified contents\n     */\n    Scrollbar.prototype.update = function () {\n        update(this);\n        this._plugins.forEach(function (plugin) {\n            plugin.onUpdate();\n        });\n    };\n    /**\n     * Checks if an element is visible in the current view area\n     */\n    Scrollbar.prototype.isVisible = function (elem) {\n        return isVisible(this, elem);\n    };\n    /**\n     * Sets the scrollbar to the given offset without easing\n     */\n    Scrollbar.prototype.setPosition = function (x, y, options) {\n        var _this = this;\n        if (x === void 0) { x = this.offset.x; }\n        if (y === void 0) { y = this.offset.y; }\n        if (options === void 0) { options = {}; }\n        var status = setPosition(this, x, y);\n        if (!status || options.withoutCallbacks) {\n            return;\n        }\n        this._listeners.forEach(function (fn) {\n            fn.call(_this, status);\n        });\n    };\n    /**\n     * Scrolls to given position with easing function\n     */\n    Scrollbar.prototype.scrollTo = function (x, y, duration, options) {\n        if (x === void 0) { x = this.offset.x; }\n        if (y === void 0) { y = this.offset.y; }\n        if (duration === void 0) { duration = 0; }\n        if (options === void 0) { options = {}; }\n        scrollTo(this, x, y, duration, options);\n    };\n    /**\n     * Scrolls the target element into visible area of scrollbar,\n     * likes the DOM method `element.scrollIntoView().\n     */\n    Scrollbar.prototype.scrollIntoView = function (elem, options) {\n        if (options === void 0) { options = {}; }\n        scrollIntoView(this, elem, options);\n    };\n    /**\n     * Adds scrolling listener\n     */\n    Scrollbar.prototype.addListener = function (fn) {\n        if (typeof fn !== 'function') {\n            throw new TypeError('[smooth-scrollbar] scrolling listener should be a function');\n        }\n        this._listeners.add(fn);\n    };\n    /**\n     * Removes listener previously registered with `scrollbar.addListener()`\n     */\n    Scrollbar.prototype.removeListener = function (fn) {\n        this._listeners.delete(fn);\n    };\n    /**\n     * Adds momentum and applys delta transformers.\n     */\n    Scrollbar.prototype.addTransformableMomentum = function (x, y, fromEvent, callback) {\n        this._updateDebounced();\n        var finalDelta = this._plugins.reduce(function (delta, plugin) {\n            return plugin.transformDelta(delta, fromEvent) || delta;\n        }, { x: x, y: y });\n        var willScroll = !this._shouldPropagateMomentum(finalDelta.x, finalDelta.y);\n        if (willScroll) {\n            this.addMomentum(finalDelta.x, finalDelta.y);\n        }\n        if (callback) {\n            callback.call(this, willScroll);\n        }\n    };\n    /**\n     * Increases scrollbar's momentum\n     */\n    Scrollbar.prototype.addMomentum = function (x, y) {\n        this.setMomentum(this._momentum.x + x, this._momentum.y + y);\n    };\n    /**\n     * Sets scrollbar's momentum to given value\n     */\n    Scrollbar.prototype.setMomentum = function (x, y) {\n        if (this.limit.x === 0) {\n            x = 0;\n        }\n        if (this.limit.y === 0) {\n            y = 0;\n        }\n        if (this.options.renderByPixels) {\n            x = Math.round(x);\n            y = Math.round(y);\n        }\n        this._momentum.x = x;\n        this._momentum.y = y;\n    };\n    /**\n     * Update options for specific plugin\n     *\n     * @param pluginName Name of the plugin\n     * @param [options] An object includes the properties that you want to update\n     */\n    Scrollbar.prototype.updatePluginOptions = function (pluginName, options) {\n        this._plugins.forEach(function (plugin) {\n            if (plugin.name === pluginName) {\n                Object.assign(plugin.options, options);\n            }\n        });\n    };\n    Scrollbar.prototype.destroy = function () {\n        var _a = this, containerEl = _a.containerEl, contentEl = _a.contentEl;\n        clearEventsOn(this);\n        this._listeners.clear();\n        this.setMomentum(0, 0);\n        cancelAnimationFrame(this._renderID);\n        if (this._observer) {\n            this._observer.disconnect();\n        }\n        scrollbarMap.delete(this.containerEl);\n        // restore contents\n        var childNodes = Array.from(contentEl.childNodes);\n        while (containerEl.firstChild) {\n            containerEl.removeChild(containerEl.firstChild);\n        }\n        childNodes.forEach(function (el) {\n            containerEl.appendChild(el);\n        });\n        // reset scroll position\n        setStyle(containerEl, {\n            overflow: '',\n        });\n        containerEl.scrollTop = this.scrollTop;\n        containerEl.scrollLeft = this.scrollLeft;\n        // invoke plugin.onDestroy\n        this._plugins.forEach(function (plugin) {\n            plugin.onDestroy();\n        });\n        this._plugins.length = 0;\n    };\n    Scrollbar.prototype._init = function () {\n        var _this = this;\n        this.update();\n        // init evet handlers\n        Object.keys(eventHandlers).forEach(function (prop) {\n            eventHandlers[prop](_this);\n        });\n        // invoke `plugin.onInit`\n        this._plugins.forEach(function (plugin) {\n            plugin.onInit();\n        });\n        this._render();\n    };\n    Scrollbar.prototype._updateDebounced = function () {\n        this.update();\n    };\n    // check whether to propagate monmentum to parent scrollbar\n    // the following situations are considered as `true`:\n    //         1. continuous scrolling is enabled (automatically disabled when overscroll is enabled)\n    //         2. scrollbar reaches one side and is not about to scroll on the other direction\n    Scrollbar.prototype._shouldPropagateMomentum = function (deltaX, deltaY) {\n        if (deltaX === void 0) { deltaX = 0; }\n        if (deltaY === void 0) { deltaY = 0; }\n        var _a = this, options = _a.options, offset = _a.offset, limit = _a.limit;\n        if (!options.continuousScrolling)\n            return false;\n        // force an update when scrollbar is \"unscrollable\", see #106\n        if (limit.x === 0 && limit.y === 0) {\n            this._updateDebounced();\n        }\n        var destX = clamp(deltaX + offset.x, 0, limit.x);\n        var destY = clamp(deltaY + offset.y, 0, limit.y);\n        var res = true;\n        // offsets are not about to change\n        // `&=` operator is not allowed for boolean types\n        res = res && (destX === offset.x);\n        res = res && (destY === offset.y);\n        // current offsets are on the edge\n        res = res && (offset.x === limit.x || offset.x === 0 || offset.y === limit.y || offset.y === 0);\n        return res;\n    };\n    Scrollbar.prototype._render = function () {\n        var _momentum = this._momentum;\n        if (_momentum.x || _momentum.y) {\n            var nextX = this._nextTick('x');\n            var nextY = this._nextTick('y');\n            _momentum.x = nextX.momentum;\n            _momentum.y = nextY.momentum;\n            this.setPosition(nextX.position, nextY.position);\n        }\n        var remain = __assign({}, this._momentum);\n        this._plugins.forEach(function (plugin) {\n            plugin.onRender(remain);\n        });\n        this._renderID = requestAnimationFrame(this._render.bind(this));\n    };\n    Scrollbar.prototype._nextTick = function (direction) {\n        var _a = this, options = _a.options, offset = _a.offset, _momentum = _a._momentum;\n        var current = offset[direction];\n        var remain = _momentum[direction];\n        if (Math.abs(remain) <= 0.1) {\n            return {\n                momentum: 0,\n                position: current + remain,\n            };\n        }\n        var nextMomentum = remain * (1 - options.damping);\n        if (options.renderByPixels) {\n            nextMomentum |= 0;\n        }\n        return {\n            momentum: nextMomentum,\n            position: current + remain - nextMomentum,\n        };\n    };\n    __decorate([\n        debounce(100, { leading: true })\n    ], Scrollbar.prototype, \"_updateDebounced\", null);\n    return Scrollbar;\n}());\nexport { Scrollbar };\n//# sourceMappingURL=scrollbar.js.map"]},"metadata":{},"sourceType":"module"}