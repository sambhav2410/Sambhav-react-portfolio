{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { range, boolean } from './decorators/';\n\nvar Options =\n/** @class */\nfunction () {\n  function Options(config) {\n    var _this = this;\n\n    if (config === void 0) {\n      config = {};\n    }\n    /**\n     * Momentum reduction damping factor, a float value between `(0, 1)`.\n     * The lower the value is, the more smooth the scrolling will be\n     * (also the more paint frames).\n     */\n\n\n    this.damping = 0.1;\n    /**\n     * Minimal size for scrollbar thumbs.\n     */\n\n    this.thumbMinSize = 20;\n    /**\n     * Render every frame in integer pixel values\n     * set to `true` to improve scrolling performance.\n     */\n\n    this.renderByPixels = true;\n    /**\n     * Keep scrollbar tracks visible\n     */\n\n    this.alwaysShowTracks = false;\n    /**\n     * Set to `true` to allow outer scrollbars continue scrolling\n     * when current scrollbar reaches edge.\n     */\n\n    this.continuousScrolling = true;\n    /**\n     * Delegate wheel events and touch events to the given element.\n     * By default, the container element is used.\n     * This option will be useful for dealing with fixed elements.\n     */\n\n    this.delegateTo = null;\n    /**\n     * Options for plugins. Syntax:\n     *   plugins[pluginName] = pluginOptions: any\n     */\n\n    this.plugins = {};\n    Object.keys(config).forEach(function (prop) {\n      _this[prop] = config[prop];\n    });\n  }\n\n  Object.defineProperty(Options.prototype, \"wheelEventTarget\", {\n    get: function () {\n      return this.delegateTo;\n    },\n    set: function (el) {\n      console.warn('[smooth-scrollbar]: `options.wheelEventTarget` is deprecated and will be removed in the future, use `options.delegateTo` instead.');\n      this.delegateTo = el;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  __decorate([range(0, 1)], Options.prototype, \"damping\", void 0);\n\n  __decorate([range(0, Infinity)], Options.prototype, \"thumbMinSize\", void 0);\n\n  __decorate([boolean], Options.prototype, \"renderByPixels\", void 0);\n\n  __decorate([boolean], Options.prototype, \"alwaysShowTracks\", void 0);\n\n  __decorate([boolean], Options.prototype, \"continuousScrolling\", void 0);\n\n  return Options;\n}();\n\nexport { Options };","map":{"version":3,"sources":["src/options.ts"],"names":[],"mappings":";AAAA,SACE,KADF,EAEE,OAFF,QAGO,eAHP;;AASA,IAAA,OAAA;AAAA;AAAA,YAAA;AA0DE,WAAA,OAAA,CAAY,MAAZ,EAAkD;AAAlD,QAAA,KAAA,GAAA,IAAA;;AAAY,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAA,EAAA;AAAsC;AAzDlD;;;;AAIG;;;AAEH,SAAA,OAAA,GAAU,GAAV;AAEA;;AAEG;;AAEH,SAAA,YAAA,GAAe,EAAf;AAEA;;;AAGG;;AAEH,SAAA,cAAA,GAAiB,IAAjB;AAEA;;AAEG;;AAEH,SAAA,gBAAA,GAAmB,KAAnB;AAEA;;;AAGG;;AAEH,SAAA,mBAAA,GAAsB,IAAtB;AAEA;;;;AAIG;;AACH,SAAA,UAAA,GAAiC,IAAjC;AAYA;;;AAGG;;AACM,SAAA,OAAA,GAAe,EAAf;AAGP,IAAA,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,UAAC,IAAD,EAAK;AAC/B,MAAA,KAAI,CAAC,IAAD,CAAJ,GAAa,MAAM,CAAC,IAAD,CAAnB;AACD,KAFD;AAGD;;AApBD,EAAA,MAAA,CAAA,cAAA,CAAI,OAAA,CAAA,SAAJ,EAAI,kBAAJ,EAAoB;SAApB,YAAA;AACE,aAAO,KAAK,UAAZ;AACD,KAFmB;SAIpB,UAAqB,EAArB,EAA2C;AACzC,MAAA,OAAO,CAAC,IAAR,CAAa,mIAAb;AAEA,WAAK,UAAL,GAAkB,EAAlB;AACD,KARmB;oBAAA;;AAAA,GAApB;;AAnCA,EAAA,UAAA,CAAA,CADC,KAAK,CAAC,CAAD,EAAI,CAAJ,CACN,CAAA,E,iBAAA,E,SAAA,E,KAAc,CAAd,CAAA;;AAMA,EAAA,UAAA,CAAA,CADC,KAAK,CAAC,CAAD,EAAI,QAAJ,CACN,CAAA,E,iBAAA,E,cAAA,E,KAAkB,CAAlB,CAAA;;AAOA,EAAA,UAAA,CAAA,CADC,OACD,CAAA,E,iBAAA,E,gBAAA,E,KAAsB,CAAtB,CAAA;;AAMA,EAAA,UAAA,CAAA,CADC,OACD,CAAA,E,iBAAA,E,kBAAA,E,KAAyB,CAAzB,CAAA;;AAOA,EAAA,UAAA,CAAA,CADC,OACD,CAAA,E,iBAAA,E,qBAAA,E,KAA2B,CAA3B,CAAA;;AA8BF,SAAA,OAAA;AAAC,CA/DD,EAAA;;SAAa,O","sourceRoot":"","sourcesContent":["import { __decorate } from \"tslib\";\nimport { range, boolean, } from './decorators/';\nvar Options = /** @class */ (function () {\n    function Options(config) {\n        var _this = this;\n        if (config === void 0) { config = {}; }\n        /**\n         * Momentum reduction damping factor, a float value between `(0, 1)`.\n         * The lower the value is, the more smooth the scrolling will be\n         * (also the more paint frames).\n         */\n        this.damping = 0.1;\n        /**\n         * Minimal size for scrollbar thumbs.\n         */\n        this.thumbMinSize = 20;\n        /**\n         * Render every frame in integer pixel values\n         * set to `true` to improve scrolling performance.\n         */\n        this.renderByPixels = true;\n        /**\n         * Keep scrollbar tracks visible\n         */\n        this.alwaysShowTracks = false;\n        /**\n         * Set to `true` to allow outer scrollbars continue scrolling\n         * when current scrollbar reaches edge.\n         */\n        this.continuousScrolling = true;\n        /**\n         * Delegate wheel events and touch events to the given element.\n         * By default, the container element is used.\n         * This option will be useful for dealing with fixed elements.\n         */\n        this.delegateTo = null;\n        /**\n         * Options for plugins. Syntax:\n         *   plugins[pluginName] = pluginOptions: any\n         */\n        this.plugins = {};\n        Object.keys(config).forEach(function (prop) {\n            _this[prop] = config[prop];\n        });\n    }\n    Object.defineProperty(Options.prototype, \"wheelEventTarget\", {\n        get: function () {\n            return this.delegateTo;\n        },\n        set: function (el) {\n            console.warn('[smooth-scrollbar]: `options.wheelEventTarget` is deprecated and will be removed in the future, use `options.delegateTo` instead.');\n            this.delegateTo = el;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        range(0, 1)\n    ], Options.prototype, \"damping\", void 0);\n    __decorate([\n        range(0, Infinity)\n    ], Options.prototype, \"thumbMinSize\", void 0);\n    __decorate([\n        boolean\n    ], Options.prototype, \"renderByPixels\", void 0);\n    __decorate([\n        boolean\n    ], Options.prototype, \"alwaysShowTracks\", void 0);\n    __decorate([\n        boolean\n    ], Options.prototype, \"continuousScrolling\", void 0);\n    return Options;\n}());\nexport { Options };\n//# sourceMappingURL=options.js.map"]},"metadata":{},"sourceType":"module"}