{"ast":null,"code":"import { ScrollbarThumb } from './thumb';\nimport { setStyle } from '../utils/';\n\nvar ScrollbarTrack =\n/** @class */\nfunction () {\n  function ScrollbarTrack(direction, thumbMinSize) {\n    if (thumbMinSize === void 0) {\n      thumbMinSize = 0;\n    }\n    /**\n     * Track element\n     */\n\n\n    this.element = document.createElement('div');\n    this._isShown = false;\n    this.element.className = \"scrollbar-track scrollbar-track-\" + direction;\n    this.thumb = new ScrollbarThumb(direction, thumbMinSize);\n    this.thumb.attachTo(this.element);\n  }\n  /**\n   * Attach to scrollbar container element\n   *\n   * @param scrollbarContainer Scrollbar container element\n   */\n\n\n  ScrollbarTrack.prototype.attachTo = function (scrollbarContainer) {\n    scrollbarContainer.appendChild(this.element);\n  };\n  /**\n   * Show track immediately\n   */\n\n\n  ScrollbarTrack.prototype.show = function () {\n    if (this._isShown) {\n      return;\n    }\n\n    this._isShown = true;\n    this.element.classList.add('show');\n  };\n  /**\n   * Hide track immediately\n   */\n\n\n  ScrollbarTrack.prototype.hide = function () {\n    if (!this._isShown) {\n      return;\n    }\n\n    this._isShown = false;\n    this.element.classList.remove('show');\n  };\n\n  ScrollbarTrack.prototype.update = function (scrollOffset, containerSize, pageSize) {\n    setStyle(this.element, {\n      display: pageSize <= containerSize ? 'none' : 'block'\n    });\n    this.thumb.update(scrollOffset, containerSize, pageSize);\n  };\n\n  return ScrollbarTrack;\n}();\n\nexport { ScrollbarTrack };","map":{"version":3,"sources":["../src/track/track.ts"],"names":[],"mappings":"AAEA,SAAS,cAAT,QAA+B,SAA/B;AAEA,SACE,QADF,QAEO,WAFP;;AAIA,IAAA,cAAA;AAAA;AAAA,YAAA;AAUE,WAAA,cAAA,CACE,SADF,EAEE,YAFF,EAE0B;AAAxB,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAA,CAAA;AAAwB;AAT1B;;AAEG;;;AACM,SAAA,OAAA,GAAU,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAV;AAED,SAAA,QAAA,GAAW,KAAX;AAMN,SAAK,OAAL,CAAa,SAAb,GAAyB,qCAAmC,SAA5D;AAEA,SAAK,KAAL,GAAa,IAAI,cAAJ,CACX,SADW,EAEX,YAFW,CAAb;AAKA,SAAK,KAAL,CAAW,QAAX,CAAoB,KAAK,OAAzB;AACD;AAED;;;;AAIG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,kBAAT,EAAwC;AACtC,IAAA,kBAAkB,CAAC,WAAnB,CAA+B,KAAK,OAApC;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,QAAI,KAAK,QAAT,EAAmB;AACjB;AACD;;AAED,SAAK,QAAL,GAAgB,IAAhB;AACA,SAAK,OAAL,CAAa,SAAb,CAAuB,GAAvB,CAA2B,MAA3B;AACD,GAPD;AASA;;AAEG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB;AACD;;AAED,SAAK,QAAL,GAAgB,KAAhB;AACA,SAAK,OAAL,CAAa,SAAb,CAAuB,MAAvB,CAA8B,MAA9B;AACD,GAPD;;AASA,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UACE,YADF,EAEE,aAFF,EAGE,QAHF,EAGkB;AAEhB,IAAA,QAAQ,CAAC,KAAK,OAAN,EAAe;AACrB,MAAA,OAAO,EAAE,QAAQ,IAAI,aAAZ,GAA4B,MAA5B,GAAqC;AADzB,KAAf,CAAR;AAIA,SAAK,KAAL,CAAW,MAAX,CAAkB,YAAlB,EAAgC,aAAhC,EAA+C,QAA/C;AACD,GAVD;;AAWF,SAAA,cAAA;AAAC,CApED,EAAA","sourceRoot":"","sourcesContent":["import { ScrollbarThumb } from './thumb';\nimport { setStyle, } from '../utils/';\nvar ScrollbarTrack = /** @class */ (function () {\n    function ScrollbarTrack(direction, thumbMinSize) {\n        if (thumbMinSize === void 0) { thumbMinSize = 0; }\n        /**\n         * Track element\n         */\n        this.element = document.createElement('div');\n        this._isShown = false;\n        this.element.className = \"scrollbar-track scrollbar-track-\" + direction;\n        this.thumb = new ScrollbarThumb(direction, thumbMinSize);\n        this.thumb.attachTo(this.element);\n    }\n    /**\n     * Attach to scrollbar container element\n     *\n     * @param scrollbarContainer Scrollbar container element\n     */\n    ScrollbarTrack.prototype.attachTo = function (scrollbarContainer) {\n        scrollbarContainer.appendChild(this.element);\n    };\n    /**\n     * Show track immediately\n     */\n    ScrollbarTrack.prototype.show = function () {\n        if (this._isShown) {\n            return;\n        }\n        this._isShown = true;\n        this.element.classList.add('show');\n    };\n    /**\n     * Hide track immediately\n     */\n    ScrollbarTrack.prototype.hide = function () {\n        if (!this._isShown) {\n            return;\n        }\n        this._isShown = false;\n        this.element.classList.remove('show');\n    };\n    ScrollbarTrack.prototype.update = function (scrollOffset, containerSize, pageSize) {\n        setStyle(this.element, {\n            display: pageSize <= containerSize ? 'none' : 'block',\n        });\n        this.thumb.update(scrollOffset, containerSize, pageSize);\n    };\n    return ScrollbarTrack;\n}());\nexport { ScrollbarTrack };\n//# sourceMappingURL=track.js.map"]},"metadata":{},"sourceType":"module"}